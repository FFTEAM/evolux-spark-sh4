
# extract image parts from the  o r i g i n a l  stock fullimage without bootloader stuff (mtd1 -> mtd6)
# - get stock fullimage on system booted with kernel generated by mt_build environment:
#	cat /dev/mtdblock8 >/tmp/stock.img
#   or by concatenating mtds on system without mtdblock8 view:
#	cat /dev/mtdblock1 /dev/mtdblock2 /dev/mtdblock3 /dev/mtdblock4 /dev/mtdblock5 /dev/mtdblock6 >/tmp/stock.img
# - place stock fullimage as file 'original-stock.mtd8.img" in your $(KATIDIR) of the mt_build environment (see ./make.sh)
# - result:
#	image		name in $(stockdir)
#	mtd1		.ker.mtd
#	mtd2		conf.mtd
#	mtd3		root.mtd
#	mtd4		.app.mtd
#	mtd5		.eme.mtd
#	mtd6		.dat.mtd

original-stock-img-print: $(stockdir)/../original-stock.mtd8.img \
		$(hostappsdir)/flash/flashmanage.stock.pl
	$(lastword $^) -i $< -o print

original-stock-img-extract: $(stockdir)/../original-stock.mtd8.img @stockdir@ \
		$(hostappsdir)/flash/flashmanage.stock.pl
	@( cd $(stockdir) && \
		$(lastword $^) -i $< -o extract \
			--part kernel=mtd.ker \
			--part conf=mtdconf \
			--part root=mtdroot \
			--part app=mtd.app \
			--part eme=mtd.eme \
			--part data=mtd.dat )
	@make original-stock-img-print

original-stock-img-build: \
		$(stockdir)/mtd.ker \
		$(stockdir)/mtdconf \
		$(stockdir)/mtdroot \
		$(stockdir)/mtd.app \
		$(stockdir)/mtd.eme \
		$(stockdir)/mtd.dat \
		$(hostappsdir)/flash/flashmanage.stock.pl
	@( cd $(stockdir) && \
		$(lastword $^) -i original-stock.mtd8.img-newbuild -o build \
		--part kernel=$< \
		--part conf=$(word 2,$+) \
		--part root=$(word 3,$+) \
		--part app=$(word 4,$+) \
		--part eme=$(word 5,$+) \
		--part data=$(word 6,$+) )


#######################################################

# Helper target just for making update images from partition images:
# Place mtd partition images as <partition>.mtd in <path_to_stockdir>. Generate
# update image file by performing 'make <path_to_stockdir>/<partition_type>.mtd_from_dir.update'.

.ker.mtd.update \
conf.mtd.update \
root.mtd.update \
.app.mtd.update \
.eme.mtd.update \
.dat.mtd.update: \
%.mtd.update: $(stockdir)/%.mtd.update

$(stockdir)/.ker.mtd.update \
$(stockdir)/conf.mtd.update \
$(stockdir)/root.mtd.update \
$(stockdir)/.app.mtd.update \
$(stockdir)/.eme.mtd.update \
$(stockdir)/.dat.mtd.update: \
$(stockdir)/%.mtd.update: $(stockdir)/%.mtd
	make update_header PARTITION=$* FILEIMAGE=$<

#######################################################

# Helper target for making update images from directories:
# Provide directories <partition> in <path_to_stockdir>. Generate update image file
# by performing 'make <path_to_stockdir>/<partition_type>.mtd_from_dir.update'.

.ker.mtd_from_dir.update \
conf.mtd_from_dir.update \
root.mtd_from_dir.update \
.app.mtd_from_dir.update \
.eme.mtd_from_dir.update \
.dat.mtd_from_dir.update: \
%.mtd_from_dir.update: $(stockdir)/%.mtd_from_dir.update

$(stockdir)/.ker.mtd_from_dir.update \
$(stockdir)/conf.mtd_from_dir.update \
$(stockdir)/root.mtd_from_dir.update \
$(stockdir)/.app.mtd_from_dir.update \
$(stockdir)/.eme.mtd_from_dir.update \
$(stockdir)/.dat.mtd_from_dir.update: \
$(stockdir)/%.mtd_from_dir.update: $(stockdir)/%.mtd_from_dir
	make update_header PARTITION=$* FILEIMAGE=$<

check_file_size:
	@filesize=$$(stat -c%s $(PART)); \
	hexupper_partition_size=`echo -e "$(PART_SIZE)" | tr '[a-f]' '[A-F]' | cut  -b3-`; \
	dec_partition_size=`echo -e "ibase=16;$$hexupper_partition_size" | bc`; \
	chmod 644 $(PART); \
	if [ $$filesize -gt $$dec_partition_size ]; \
		then echo "fatal error: File $@ too large ($$filesize > $$dec_partition_size, $(PART_SIZE))"; \
		rm $(PART); exit 1; \
	fi
	@echo "##############################################################################################"
	@echo "Info:  make $(PART) [PART_SIZE=<size>] [FS_TYPE=cramfs|squashfs|jffs2]"
	@echo "       PART_SIZE: Default partition size is $(DEFAULT_PART_SIZE)"
	@echo "       FS_TYPE:   Default filesystem type is cramfs for root|.app|.eme and jffs2 for conf|.dat"
	@echo "                  Optionally squashfs for root|.app and jffs2 for root|.app"
	@echo "##############################################################################################"
	@sleep 2

PART_SIZE=
FS_TYPE=

$(stockdir)/conf.mtd_from_dir: \
$(stockdir)/%.mtd_from_dir: $(stockdir)/% $(MKJFFS2)
	@[ -z $(PART_SIZE) ] && partition_size=0xA0000 || partition_size=$(PART_SIZE); \
	rm $@ || true; \
	$(MKJFFS2) -e 0x10000 --pad=$$partition_size -r $< -o $@; \
	make check_file_size PART=$@ PART_SIZE=$$partition_size DEFAULT_PART_SIZE=0xA0000

$(stockdir)/root.mtd_from_dir: \
$(stockdir)/%.mtd_from_dir: $(stockdir)/% $(MKCRAMFS) $(MKSQUASHFS) $(MKJFFS2)
	@[ -z $(PART_SIZE) ] && partition_size=0x240000 || partition_size=$(PART_SIZE); \
	rm $@ || true; \
	[ "$(FS_TYPE)" == "squashfs" ] && $(MKSQUASHFS) $< $@ -noappend -le -force-uid 0 -force-gid 0 -all-root || \
		( [ "$(FS_TYPE)" == "jffs2" ] && $(MKJFFS2) -e 0x10000 --pad=$$partition_size -l -U -r $< -o $@ || \
			$(MKCRAMFS) $< $@ ); \
	make check_file_size PART=$@ PART_SIZE=$$partition_size DEFAULT_PART_SIZE=0x240000

$(stockdir)/.app.mtd_from_dir: \
$(stockdir)/%.mtd_from_dir: $(stockdir)/% $(MKCRAMFS)
	@[ -z $(PART_SIZE) ] && partition_size=0x600000 || partition_size=$(PART_SIZE); \
	rm $@ || true; \
	[ "$(FS_TYPE)" == "squashfs" ] && $(MKSQUASHFS) $< $@ -noappend -le -force-uid 0 -force-gid 0 -all-root || \
		( [ "$(FS_TYPE)" == "jffs2" ] && $(MKJFFS2) -e 0x10000 --pad=$$partition_size -l -U -r $< -o $@ || \
			$(MKCRAMFS) $< $@ ); \
	make check_file_size PART=$@ PART_SIZE=$$partition_size DEFAULT_PART_SIZE=0x600000

$(stockdir)/.eme.mtd_from_dir: \
$(stockdir)/%.mtd_from_dir: $(stockdir)/% $(MKCRAMFS)
	@[ -z $(PART_SIZE) ] && partition_size=0x120000 || partition_size=$(PART_SIZE); \
	rm $@ || true; \
	$(MKCRAMFS) $< $@; \
	make check_file_size PART=$@ PART_SIZE=$$partition_size DEFAULT_PART_SIZE=0x120000

$(stockdir)/.dat.mtd_from_dir: \
$(stockdir)/%.mtd_from_dir: $(stockdir)/% $(MKCRAMFS)
	@[ -z $(PART_SIZE) ] && partition_size=0x400000 || partition_size=$(PART_SIZE); \
	rm $@ || true; \
	$(MKJFFS2) -e 0x10000 --pad=$$partition_size -r $< -o $@; \
	make check_file_size PART=$@ PART_SIZE=$$partition_size DEFAULT_PART_SIZE=0x400000

stock-clean:
	-rm $(stockdir)/*
	-rm $(stockdir)/.[!.]*

.PHONY: $(stockdir)/.ker.mtd.update \
	$(stockdir)/conf.mtd.update \
	$(stockdir)/root.mtd.update \
	$(stockdir)/.app.mtd.update \
	$(stockdir)/.eme.mtd.update \
	$(stockdir)/.dat.mtd.update \
	$(stockdir)/conf.mtd_from_dir.update $(stockdir)/conf.mtd_from_dir \
	$(stockdir)/root.mtd_from_dir.update $(stockdir)/root.mtd_from_dir \
	$(stockdir)/.app.mtd_from_dir.update $(stockdir)/.app.mtd_from_dir \
	$(stockdir)/.eme.mtd_from_dir.update $(stockdir)/.eme.mtd_from_dir \
	$(stockdir)/.dat.mtd_from_dir.update $(stockdir)/.dat.mtd_from_dir
