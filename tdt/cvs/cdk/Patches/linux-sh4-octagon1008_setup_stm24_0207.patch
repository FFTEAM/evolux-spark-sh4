--- a/arch/sh/boards/mach-mb448/setup.c	2011-07-16 12:34:33.000000000 +0200
+++ b/setup.c	2011-07-16 18:33:48.461129318 +0200
@@ -19,6 +19,7 @@
 #include <linux/mtd/physmap.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
+#include <linux/bpa2.h>
 #include <asm/irl.h>
 
 
@@ -26,6 +27,25 @@
 #define MB448_PIO_SMC91X_RESET stm_gpio(2, 6)
 #define MB448_PIO_FLASH_VPP stm_gpio(2, 7)
 
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+      {
+	      .name  = "LMI_VID",
+	      .start = 0x10800000,
+	      .size  = 0x03800000,
+	      .flags = 0,
+	      .aka   = LMI_VID_partalias
+      },
+      {
+	      .name  = "LMI_SYS",
+	      .start = 0,
+	      .size  = 0x02600000,
+	      .flags = 0,
+	      .aka   = LMI_SYS_partalias
+      }
+};
 
 
 void __init mb448_setup(char **cmdline_p)
@@ -37,9 +57,11 @@
 	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
 			.is_console = 1, });
-	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
+/*	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
 			.is_console = 0, });
+*/
+  	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
 
@@ -68,9 +90,118 @@
 
 static void mb448_set_vpp(struct map_info *info, int enable)
 {
-	gpio_set_value(MB448_PIO_FLASH_VPP, enable);
+//	gpio_set_value(MB448_PIO_FLASH_VPP, enable);
 }
 
+static struct mtd_partition mtd_parts_table[] = 
+{
+#if 1
+	{
+	 .name = "Boot firmware : 	0xA000.0000-0xA003.FFFF",
+	 .size = 0x00040000,
+	 .offset = 0x00000000,
+	 /* mask_flags: MTD_WRITEABLE *//* force read-only */
+	 },
+	 {
+	 .name = "Kernel - 		0xA004.0000-0xA01F.FFFF",
+	 .size = 0x001C0000,
+	 .offset = 0x00040000,
+	 },
+	 {
+	 .name = "Config FS - 		0xA020.0000-0xA029.FFFF",
+	 .size = 0x0A0000,	
+	 .offset = 0x00200000,
+	 },
+	 {
+	 .name = "Root FS-		0xA02A.0000-0xA04D.FFFF",
+	 .size = 0x240000,	/* will expand to the end of the flash */
+	 .offset = 0x002A0000,
+	 },
+	 {
+	 .name = "App + GTK 1		0xA04E.0000-0xA0FF.FFFF",
+	 .size = 0x00B20000,	/* will expand to the end of the flash */
+	 .offset = 0x004E0000,
+	 },
+	 {
+	 .name = "App + GTK 2		0xA04E.0000-0xA0FF.FFFF",
+	 .size = 0x00B20000,	/* will expand to the end of the flash */
+	 .offset = 0x004E0000,
+	 },
+	 {
+	 .name = "App + GTK 3		0xA04E.0000-0xA0FF.FFFF",
+	 .size = 0x00B20000,	/* will expand to the end of the flash */
+	 .offset = 0x004E0000,
+	 },
+	 {
+	 .name = "All Flash Block	0xA000.0000-0xA0FF.FFFF",
+	 .size = 0x01000000,	/* will expand to the end of the flash */
+	 .offset = 0x00000000,
+	 },
+	 {
+	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
+	 .size = 0x00fC0000,	/* will expand to the end of the flash */
+	 .offset = 0x00040000,
+	 },
+	 {
+	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
+	 .size = 0x00fC0000,	/* will expand to the end of the flash */
+	 .offset = 0x00040000,
+	 }	 
+#else
+	{
+	 .name = "Boot firmware : 	0xA000.0000-0xA003.FFFF",
+	 .size = 0x00040000,
+	 .offset = 0x00000000,
+	 /* mask_flags: MTD_WRITEABLE *//* force read-only */
+	 },
+	 {
+	 .name = "Kernel - 		0xA004.0000-0xA01F.FFFF",
+	 .size = 0x001C0000,
+	 .offset = 0x00040000,
+	 },
+	 {
+	 .name = "Config FS - 		0xA020.0000-0xA029.FFFF",
+	 .size = 0x0A0000,	
+	 .offset = 0x00200000,
+	 },
+	 {
+	 .name = "Root FS-		0xA02A.0000-0xA04D.FFFF",
+	 .size = 0x240000,	/* will expand to the end of the flash */
+	 .offset = 0x002A0000,
+	 },
+	 {
+	 .name = "APP_Modules		0xA04E.0000-0xA0AF.FFFF",
+	 .size = 0x0620000,	/* will expand to the end of the flash */
+	 .offset = 0x004E0000,
+	 },
+	 {
+	 .name = "App + GTK		0xA04E.0000-0xA0FF.FFFF",
+	 .size = 0x00B20000,	/* will expand to the end of the flash */
+	 .offset = 0x004E0000,
+	 },
+	 {
+	 .name = "GTK Lib		0xA0B0.0000-0xA0FF.FFFF",
+	 .size = 0x00500000,	/* will expand to the end of the flash */
+	 .offset = 0x00B00000,
+	 },
+	 {
+	 .name = "All Flash Block	0xA000.0000-0xA0FF.FFFF",
+	 .size = 0x01000000,	/* will expand to the end of the flash */
+	 .offset = 0x00000000,
+	 },
+	 {
+	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
+	 .size = 0x00fC0000,	/* will expand to the end of the flash */
+	 .offset = 0x00040000,
+	 },
+	 {
+	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
+	 .size = 0x00fC0000,	/* will expand to the end of the flash */
+	 .offset = 0x00040000,
+	 }	 
+#endif	 
+};
+
 static struct platform_device mb448_physmap_flash = {
 	.name		= "physmap-flash",
 	.id		= -1,
@@ -81,12 +212,14 @@
 	.dev.platform_data = &(struct physmap_flash_data) {
 		.width		= 2,
 		.set_vpp	= mb448_set_vpp,
+    	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+    	.parts		= mtd_parts_table
 	},
 };
 
 
 
-#define STMMAC_PHY_ADDR 14
+#define STMMAC_PHY_ADDR 2
 static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
 	[STMMAC_PHY_ADDR] = IRL0_IRQ,
 };
@@ -106,7 +239,7 @@
 	stx7100_configure_sata();
 
 	stx7100_configure_ssc_i2c(0);
-	stx7100_configure_ssc_spi(1, NULL);
+	stx7100_configure_ssc_i2c(1);
 	stx7100_configure_ssc_i2c(2);
 
 	stx7100_configure_usb();
@@ -119,17 +252,17 @@
 			.mdio_bus_data = &stmmac_mdio_bus,
 		});
 
-	gpio_request(MB448_PIO_FLASH_VPP, "Flash VPP");
+/*	gpio_request(MB448_PIO_FLASH_VPP, "Flash VPP");
 	gpio_direction_output(MB448_PIO_FLASH_VPP, 0);
-
-	/* Reset the SMSC 91C111 Ethernet chip */
+*/
+	/* Reset the SMSC 91C111 Ethernet chip 
 	gpio_request(MB448_PIO_SMC91X_RESET, "SMC91x reset");
 	gpio_direction_output(MB448_PIO_SMC91X_RESET, 0);
 	udelay(1);
 	gpio_set_value(MB448_PIO_SMC91X_RESET, 1);
 	udelay(1);
 	gpio_set_value(MB448_PIO_SMC91X_RESET, 0);
-
+*/
 	return platform_add_devices(mb448_devices,
 			ARRAY_SIZE(mb448_devices));
 }
--- a/drivers/stm/stx7100_comms.c	2011-07-16 12:34:36.000000000 +0200
+++ b/stx7100_comms.c	2011-07-16 18:33:38.021124413 +0200
@@ -240,12 +240,12 @@
 			STM_PAD_PIO_BIDIR_NAMED(3, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(3, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC1_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 2, 2, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+			/* DVO_OUT_ON = 0 (SSC not DVO) 
+			STM_PAD_SYS_CFG(7, 10, 10, 0),*/
 		},
 	},
 	[2] = {
