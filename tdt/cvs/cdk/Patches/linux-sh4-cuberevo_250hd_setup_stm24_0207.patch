--- a/arch/sh/Makefile	2011-08-16 18:57:57.000000000 +0200
+++ b/arch/sh/Makefile	2011-08-25 20:33:12.078531194 +0200
@@ -74,7 +74,7 @@
 cflags-y	+= $(isaflags-y) -ffreestanding
 
 OBJCOPYFLAGS	:= -O binary -R .note -R .note.gnu.build-id -R .comment \
-		   -R .stab -R .stabstr -S
+		   -R .stab -R .stabstr -S -R .empty_zero_page
 
 # Give the various platforms the opportunity to set default image types
 defaultimage-$(CONFIG_SUPERH32)			:= zImage
--- a/arch/sh/boards/mach-mb442/setup.c	2011-08-16 18:57:57.000000000 +0200
+++ b/setup.c	2011-08-25 20:34:41.228575705 +0200
@@ -22,6 +22,7 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
+#include <linux/bpa2.h>
 
 
 
@@ -29,6 +30,44 @@
 #define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
 #define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
 
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
+ 
+#ifdef CONFIG_32BIT
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "LMI_VID",
+		.start = 0x81000000,
+		.size  = 0x07000000,
+		.flags = 0,
+		.aka   = LMI_VID_partalias
+	},
+	{
+		.name  = "LMI_SYS",
+		.start = 0,
+		.size  = 0x05000000,
+		.flags = 0,
+		.aka   = LMI_SYS_partalias
+	}
+};
+#else
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "LMI_VID",
+		.start = 0x10800000,
+		.size  = 0x03800000,
+		.flags = 0,
+		.aka   = LMI_VID_partalias
+	},
+	{
+		.name  = "LMI_SYS",
+		.start = 0,
+		.size  = 0x02600000,
+		.flags = 0,
+		.aka   = LMI_SYS_partalias
+	}
+};
+#endif /* CONFIG_32BIT */
 
 
 void __init mb442_setup(char** cmdline_p)
@@ -39,30 +78,113 @@
 
 	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
-			.is_console = 1, });
+			.is_console = 0, });
 	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
-			.is_console = 0, });
+			.is_console = 1, });
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
-static struct resource mb442_smc91x_resources[] = {
-	[0] = {
-		.start	= 0x02000300,
-		.end	= 0x02000300 + 0xff,
-		.flags	= IORESOURCE_MEM,
-	},
-	[1] = {
-		.start	= IRL0_IRQ,
-		.end	= IRL0_IRQ,
-		.flags	= IORESOURCE_IRQ,
-	},
-};
+#define	FLASH_32MB
+//#define FLASH_16MB
+
+#if defined(FLASH_32MB)
+
+// 32MB flash
+#define WINDOW_ADDR	0xA0000000
+#define WINDOW_SIZE	0x02000000
+
+#define BOOT_SIZE	0x040000	// boot loader
+#define WELCOME_SIZE	0x020000	// welcome+boot config
+#define KERNEL_SIZE	0x220000	// kernel size
+#define ROOT_SIZE	(WINDOW_SIZE-WELCOME_SIZE-KERNEL_SIZE-DB_SIZE-BOOT_SIZE)
+#define DB_SIZE	0x800000
+
+#elif defined(FLASH_16MB) 
+
+// 16MB flash
+#define WINDOW_ADDR	0xA0000000
+#define WINDOW_SIZE	0x01000000
+
+#define BOOT_SIZE	0x040000	// boot loader
+#define WELCOME_SIZE	0x020000	// welcome+boot config
+#define KERNEL_SIZE	0x1A0000	// kernel size
+#define ROOT_SIZE	(WINDOW_SIZE-WELCOME_SIZE-KERNEL_SIZE-DB_SIZE-BOOT_SIZE)
+#define DB_SIZE		0x600000
+
+#else
+
+// 8MB flash
+#define WINDOW_ADDR     0xA0000000 	 
+#define WINDOW_SIZE     0x00800000 	 
+
+#define BOOT_SIZE       0x030000        // boot loader 	 
+#define WELCOME_SIZE    0x010000        // welcome+boot config 	 
+#define KERNEL_SIZE     0x180000        // kernel size 	 
+#define ROOT_SIZE       (WINDOW_SIZE-WELCOME_SIZE-KERNEL_SIZE-DB_SIZE-BOOT_SIZE) 	 
+#define DB_SIZE         0x230000
+
+
+#endif
+
 
-static struct platform_device mb442_smc91x_device = {
-	.name		= "smc91x",
-	.id		= 0,
-	.num_resources	= ARRAY_SIZE(mb442_smc91x_resources),
-	.resource	= mb442_smc91x_resources,
+
+#define ONBOARD_ADDR 0x00000000
+
+#define ONBOARD_SIZE		WINDOW_SIZE
+#define ONBOARD_BANKWIDTH	2
+
+static struct mtd_partition mtd_parts_table[] = {
+	{
+		.name 		= "nor.boot",
+		.offset 	= 0x00000000,
+		.size		= BOOT_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
+	{
+		.name		= "nor.config_welcome",
+		.offset		= BOOT_SIZE,
+		.size		= WELCOME_SIZE,
+	},
+	{	.name		= "nor.kernel",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE,
+		.mask_flags	= MTD_WRITEABLE,
+	},
+	{
+		.name		= "nor.root",
+		.offset		= BOOT_SIZE+WELCOME_SIZE+KERNEL_SIZE,
+		.size		= ROOT_SIZE,
+		.mask_flags	= MTD_WRITEABLE,
+	},
+	{
+		.name		= "nor.db",
+		.offset		= BOOT_SIZE+WELCOME_SIZE+KERNEL_SIZE+ROOT_SIZE,
+		.size		= DB_SIZE,
+	},
+	/* partitions for upgrade */
+	{
+		.name		= "nor.kernel_root",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE+ROOT_SIZE,
+	},
+	{
+		.name		= "nor.kernel_root_db",
+		.offset		= BOOT_SIZE+WELCOME_SIZE,
+		.size		= KERNEL_SIZE+ROOT_SIZE+DB_SIZE,
+	},
+	{
+		.name		= "nor.all_noboot",
+		.offset		= BOOT_SIZE,
+		.size		= (WINDOW_SIZE-BOOT_SIZE),
+	},
+	{
+		.name		= "nor.all",
+		.offset		= 0,
+		.size		= WINDOW_SIZE,
+		.mask_flags	= MTD_WRITEABLE,	/* force read-only */
+	},
 };
 
 static void mb442_set_vpp(struct map_info *info, int enable)
@@ -86,16 +208,17 @@
 
 static int mb442_phy_reset(void* bus)
 {
+/*
 	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
 	udelay(1);
 	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
 	udelay(1);
 	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-
+*/
 	return 1;
 }
 
-#define STMMAC_PHY_ADDR 14
+#define STMMAC_PHY_ADDR 1
 static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
 	[STMMAC_PHY_ADDR] = IRL3_IRQ,
 };
@@ -106,41 +229,43 @@
 	.irqs = stmmac_phy_irqs,
 };
 
+static struct platform_device pdiusbd12_device = {
+	.name           = "pdiusbd12",
+	.id             = -1,
+	.num_resources  = 2,
+	.resource       = (struct resource[]) {
+		{
+	                .start = 0xa2000000,
+		        .end   = 0xa200ffff,
+	        	.flags  = IORESOURCE_MEM,
+		},
+		{
+			.name   = "usbirq",
+	        	.start  = IRL0_IRQ,
+	        	.end    = IRL0_IRQ,
+	        	.flags  = IORESOURCE_IRQ,
+		},
+	},
+};
+
 static struct platform_device *mb442_devices[] __initdata = {
-	&mb442_smc91x_device,
 	&mb442_physmap_flash,
+	&pdiusbd12_device,
 };
 
 static int __init mb442_device_init(void)
 {
 	stx7100_configure_sata();
 
-	stx7100_configure_pwm(&(struct stx7100_pwm_config) {
-			.out0_enabled = 0,
-			.out1_enabled = 1, });
-
 	stx7100_configure_ssc_i2c(0);
-	stx7100_configure_ssc_spi(1, NULL);
+	stx7100_configure_ssc_i2c(1);
 	stx7100_configure_ssc_i2c(2);
 
 	stx7100_configure_usb();
 
-	stx7100_configure_lirc(&(struct stx7100_lirc_config) {
-			.rx_mode = stx7100_lirc_rx_mode_ir,
-			.tx_enabled = 0,
-			.tx_od_enabled = 0, });
-
-	stx7100_configure_pata(&(struct stx7100_pata_config) {
-			.emi_bank = 3,
-			.pc_mode = 1,
-			.irq = IRL1_IRQ, });
-
 	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
 	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
 
-	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
-	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
-
 	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
 			.mode = stx7100_ethernet_mode_mii,
 			.ext_clk = 0,
@@ -149,14 +274,6 @@
 			.mdio_bus_data = &stmmac_mdio_bus,
 		});
 
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
-
 	return platform_add_devices(mb442_devices,
 			ARRAY_SIZE(mb442_devices));
 }
--- a/arch/sh/kernel/setup.c	2011-08-16 18:57:58.000000000 +0200
+++ b/kernel/setup.c	2011-08-25 20:34:57.688583893 +0200
@@ -419,6 +419,34 @@
 #endif
 #endif
 
+	{
+	char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+	char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock4 rw rootfstype=jffs2 init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 stmmaceth=ethaddr:";
+	char mac[] = "00:00:00:00:00:00";
+	int command_line_len = strlen(command_line);
+	int org_command_line_len = strlen(org_command_line);
+
+	if(command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+	{
+		int i;
+		for(i = 0; i < (command_line_len - 7); i++)
+		{
+			if(!strncmp(command_line + i, "ethaddr", 7))
+			{
+				strlcpy(mac, command_line + i + 8, sizeof(mac));
+				break;
+			}
+			if(!strncmp(command_line + i, "hwaddr", 6))
+			{
+				strlcpy(mac, command_line + i + 7, sizeof(mac));
+				break;
+			}
+		}
+		strlcpy(command_line, tdt_command_line, sizeof(command_line));
+		strlcat(command_line, mac, sizeof(command_line));
+	}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
--- a/drivers/stm/stx7100_comms.c	2011-08-16 18:58:00.000000000 +0200
+++ b/stx7100_comms.c	2011-08-25 20:33:06.368528840 +0200
@@ -240,12 +240,12 @@
 			STM_PAD_PIO_BIDIR_NAMED(3, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(3, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC1_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 2, 2, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+			/* DVO_OUT_ON = 0 (SSC not DVO) 
+			STM_PAD_SYS_CFG(7, 10, 10, 0),*/
 		},
 	},
 	[2] = {
