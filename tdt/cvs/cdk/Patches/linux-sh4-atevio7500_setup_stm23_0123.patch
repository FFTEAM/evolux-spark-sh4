*** a/arch/sh/boards/st/pdk7105/setup.c	2011-01-05 22:26:18.000000000 +0100
--- b/setup.c	2011-01-15 20:00:19.057753423 +0100
***************
*** 23,28 ****
--- 23,29 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/mtd/nand.h>
  #include <linux/stm/nand.h>
  #include <linux/spi/spi.h>
***************
*** 57,70 ****
   *
   */
  
! static int ascs[2] __initdata = { 2, 3 };
  
  static void __init pdk7105_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics PDK7105-SDK board initialisation\n");
  
  	stx7105_early_device_init();
! 	stx7105_configure_asc(ascs, 2, 0);
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
--- 58,100 ----
   *
   */
  
! const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
!                                     "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
!  
! /*
! 0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
! 0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
! 0x40800000 - 0x47FFFFFF - linux   (120mb) 
! 0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
! 0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
! */
! static struct bpa2_partition_desc bpa2_parts_table[] = {
!     {
!  	    .name  = "bigphysarea",
!  	    .start = 0x48000000,
!  	    .size  = 0x02000000, /* 32 Mb */
!  	    .flags = 0,
!  	    .aka   = NULL
!     }, 
!     {
!  	    .name  = "LMI_IO",
!  	    .start = 0x4A000000,
!  	    .size  = 0x06000000, /* 92 Mb */
!  	    .flags = 0,
!  	    .aka   = LMI_IO_partalias
!     }, 
!  };
! 
! 
! static int ascs[1] __initdata = { 2 | (STASC_FLAG_NORTSCTS << 8)};
  
  static void __init pdk7105_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics PDK7105-SDK board initialisation\n");
  
  	stx7105_early_device_init();
! 	stx7105_configure_asc(ascs, 1, 0);
!    	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct plat_stm_pwm_data pwm_private_info = {
***************
*** 75,81 ****
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY) |
  		ssc3_has(SSC_I2C_CAPABILITY),
  	.routing =
--- 105,111 ----
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_SPI_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY) |
  		ssc3_has(SSC_I2C_CAPABILITY),
  	.routing =
***************
*** 324,333 ****
  
  static struct platform_device *pdk7105_devices[] __initdata = {
  	&pdk7105_physmap_flash,
! 	&pdk7105_leds,
! 	&pdk7105_front_panel,
  	&pdk7105_phy_device,
! 	&spi_pio_device[0],
  };
  
  /* Configuration based on Futarque-RC signals train. */
--- 354,363 ----
  
  static struct platform_device *pdk7105_devices[] __initdata = {
  	&pdk7105_physmap_flash,
! /*	&pdk7105_leds,
! 	&pdk7105_front_panel,*/
  	&pdk7105_phy_device,
! /* &spi_pio_device[0],*/
  };
  
  /* Configuration based on Futarque-RC signals train. */
***************
*** 390,395 ****
--- 420,426 ----
  		nand_device.id = 0;
  	}
  
+ #ifdef USE_IT
  	/* Setup the PCI_SERR# PIO */
  	if (gpio_request(PDK7105_GPIO_PCI_SERR, "PCI_SERR#") == 0) {
  		gpio_direction_input(PDK7105_GPIO_PCI_SERR);
***************
*** 400,408 ****
  		printk(KERN_WARNING "pdk7105: Failed to claim PCI SERR PIO!\n");
  	}
  	stx7105_configure_pci(&pdk7105_pci_config);
  
  	stx7105_configure_sata(0);
! 	stx7105_configure_pwm(&pwm_private_info);
  	stx7105_configure_ssc(&ssc_private_info);
  
  	/*
--- 431,440 ----
  		printk(KERN_WARNING "pdk7105: Failed to claim PCI SERR PIO!\n");
  	}
  	stx7105_configure_pci(&pdk7105_pci_config);
+ #endif    
  
  	stx7105_configure_sata(0);
! /*	stx7105_configure_pwm(&pwm_private_info);*/
  	stx7105_configure_ssc(&ssc_private_info);
  
  	/*
***************
*** 416,438 ****
  	 *	alt	| 12[6]	J5B 1-2		14[7]	J10B 1-2
  	 */
  
! 	stx7105_configure_usb(0, &usb_init[0]);
  	stx7105_configure_usb(1, &usb_init[1]);
  
! 	phy_reset_pin = stpio_request_set_pin(15, 5, "eth_phy_reset",
  					      STPIO_OUT, 1);
  	stx7105_configure_ethernet(0, stx7105_ethernet_mii, 0, 0, 0, 0);
! 	stx7105_configure_lirc(&lirc_scd);
  	stx7105_configure_audio_pins(0, 0, 1, 0);
! 
  	/*
  	 * FLASH_WP is shared by NOR and NAND.  However, since MTD NAND has no
  	 * concept of WP/VPP, we must permanently enable it
  	 */
! 	stpio_request_set_pin(6, 4, "FLASH_WP", STPIO_OUT, 1);
  
  	stx7105_configure_nand(&nand_device);
! 	spi_register_board_info(spi_serialflash, ARRAY_SIZE(spi_serialflash));
  
  	return platform_add_devices(pdk7105_devices, ARRAY_SIZE(pdk7105_devices));
  }
--- 448,473 ----
  	 *	alt	| 12[6]	J5B 1-2		14[7]	J10B 1-2
  	 */
  
! /*	stx7105_configure_usb(0, &usb_init[0]);*/
  	stx7105_configure_usb(1, &usb_init[1]);
  
! 	phy_reset_pin = stpio_request_set_pin(5, 5, "eth_phy_reset",
  					      STPIO_OUT, 1);
  	stx7105_configure_ethernet(0, stx7105_ethernet_mii, 0, 0, 0, 0);
! /*	stx7105_configure_lirc(&lirc_scd);
  	stx7105_configure_audio_pins(0, 0, 1, 0);
! */
  	/*
  	 * FLASH_WP is shared by NOR and NAND.  However, since MTD NAND has no
  	 * concept of WP/VPP, we must permanently enable it
  	 */
! 	stpio_request_set_pin(15, 0, "FLASH_WP", STPIO_OUT, 1);
  
  	stx7105_configure_nand(&nand_device);
! /*	spi_register_board_info(spi_serialflash, ARRAY_SIZE(spi_serialflash));*/
! 
! /* enable optical out */
!     stpio_request_pin (10, 6, "opt_out", STPIO_ALT_OUT);
  
  	return platform_add_devices(pdk7105_devices, ARRAY_SIZE(pdk7105_devices));
  }
