*** a/arch/sh/boards/mach-mb680/setup.c	2011-02-13 12:16:40.000000000 +0100
--- b/setup.c	2011-02-19 18:33:24.768890783 +0100
***************
*** 26,34 ****
--- 26,36 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <asm/irq-ilc.h>
  #include <mach/common.h>
  #include "../mach-st/mb705-epld.h"
+ #include <linux/stm/pio.h>
  
  
  
***************
*** 37,42 ****
--- 39,70 ----
  #define MB680_PIO_PCI_RESET stm_gpio(15, 6)
  #define MB680_PIO_MII_BUS_SWITCH stm_gpio(11, 2)
  
+ const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                     "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+  
+ /*
+ 0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+ 0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+ 0x40800000 - 0x47FFFFFF - linux   (120mb) 
+ 0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+ 0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+ */
+ static struct bpa2_partition_desc bpa2_parts_table[] = {
+     {
+  	    .name  = "bigphysarea",
+  	    .start = 0x48000000,
+  	    .size  = 0x02000000, /* 32 Mb */
+  	    .flags = 0,
+  	    .aka   = NULL
+     }, 
+     {
+  	    .name  = "LMI_IO",
+  	    .start = 0x4A000000,
+  	    .size  = 0x05f00000, /* 95 Mb */
+  	    .flags = 0,
+  	    .aka   = LMI_IO_partalias
+     }, 
+  };
  
  
  static void __init mb680_setup(char** cmdline_p)
***************
*** 49,57 ****
  			.routing.asc2 = stx7105_asc2_pio4,
  			.hw_flow_control = 1,
  			.is_console = 1, });
! 	stx7105_configure_asc(3, &(struct stx7105_asc_config) {
! 			.hw_flow_control = 1,
! 			.is_console = 0, });
  }
  
  
--- 77,84 ----
  			.routing.asc2 = stx7105_asc2_pio4,
  			.hw_flow_control = 1,
  			.is_console = 1, });
! 
!    	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  
***************
*** 142,148 ****
  };
  
  static struct platform_device *mb680_devices[] __initdata = {
! 	&mb680_leds,
  	&mb680_phy_device,
  };
  
--- 169,175 ----
  };
  
  static struct platform_device *mb680_devices[] __initdata = {
! /*	&mb680_leds,*/
  	&mb680_phy_device,
  };
  
***************
*** 196,213 ****
--- 223,244 ----
  
  void __init mbxxx_configure_audio_pins(void)
  {
+ /*
  	stx7105_configure_audio(&(struct stx7105_audio_config) {
  			.pcm_player_0_output =
  					stx7105_pcm_player_0_output_6_channels,
  			.spdif_player_output_enabled = 1,
  			.pcm_reader_input_enabled =
  					cpu_data->type == CPU_STX7105, });
+ */
  }
  
  static int __init mb680_devices_init(void)
  {
  	/* Setup the PCI_SERR# PIO
  	 * J20-A - open, J27-E - closed */
+ 
+ /*
  	if (gpio_request(MB680_PIO_PCI_SERR, "PCI_SERR#") == 0) {
  		gpio_direction_input(MB680_PIO_PCI_SERR);
  		mb680_pci_config.serr_irq = gpio_to_irq(MB680_PIO_PCI_SERR);
***************
*** 216,235 ****
  		printk(KERN_WARNING "mb680: Failed to claim PCI_SERR PIO!\n");
  	}
  	stx7105_configure_pci(&mb680_pci_config);
! 
  	stx7105_configure_sata(0);
  
  	/* Valid only for mb680 rev. A & rev. B (they had two SATA lines) */
! 	stx7105_configure_sata(1);
  
  	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
  			.out0 = stx7105_pwm_out0_pio13_0,
  			.out1 = stx7105_pwm_out1_disabled, });
  
! 	/* NIM CD I2C bus*/
  	stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
  			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
  			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
  	/* NIM AB/STRecord I2C bus*/
  	stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
  			.routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
--- 247,271 ----
  		printk(KERN_WARNING "mb680: Failed to claim PCI_SERR PIO!\n");
  	}
  	stx7105_configure_pci(&mb680_pci_config);
! */
  	stx7105_configure_sata(0);
  
  	/* Valid only for mb680 rev. A & rev. B (they had two SATA lines) */
! /*	stx7105_configure_sata(1);
  
  	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
  			.out0 = stx7105_pwm_out0_pio13_0,
  			.out1 = stx7105_pwm_out1_disabled, });
+ */
+ 	stx7105_configure_ssc_i2c(0, &(struct stx7105_ssc_config) {
+ 			.routing.ssc1.sclk = stx7105_ssc0_sclk_pio2_2,
+ 			.routing.ssc1.mtsr = stx7105_ssc0_mtsr_pio2_3, });
  
! 	/* NIM CD I2C bus
  	stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
  			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
  			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
+ */
  	/* NIM AB/STRecord I2C bus*/
  	stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
  			.routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,
***************
*** 251,257 ****
  	 * alt	| 12[6]	J5B:1-2  J6G:open	14[7]	J10B:1-2  J11H:open
  	 */
  	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
! 			.ovrcur_mode = stx7105_usb_ovrcur_active_low,
  			.pwr_enabled = 1,
  			.routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
  			.routing.usb0.pwr = stx7105_usb0_pwr_pio4_5, });
--- 287,293 ----
  	 * alt	| 12[6]	J5B:1-2  J6G:open	14[7]	J10B:1-2  J11H:open
  	 */
  	stx7105_configure_usb(0, &(struct stx7105_usb_config) {
! 			.ovrcur_mode = stx7105_usb_ovrcur_disabled,
  			.pwr_enabled = 1,
  			.routing.usb0.ovrcur = stx7105_usb0_ovrcur_pio4_4,
  			.routing.usb0.pwr = stx7105_usb0_pwr_pio4_5, });
***************
*** 271,276 ****
--- 307,314 ----
  			.ext_clk = 1,
  			.phy_bus = 0, });
  
+  /* enable optical out */
+      stpio_request_pin (10, 6, "opt_out", STPIO_ALT_OUT);
  	/*
  	 * Check jumpers before using IR:
  	 * On the mb705:
***************
*** 279,289 ****
  	 * On the mb680:
  	 *	J15A : fitted
  	 */
  	stx7105_configure_lirc(&(struct stx7105_lirc_config) {
  			.rx_mode = stx7105_lirc_rx_mode_ir,
  			.tx_enabled = 1,
  			.tx_od_enabled = 1, });
! 
  	return platform_add_devices(mb680_devices, ARRAY_SIZE(mb680_devices));
  }
  arch_initcall(mb680_devices_init);
--- 317,328 ----
  	 * On the mb680:
  	 *	J15A : fitted
  	 */
+ /*
  	stx7105_configure_lirc(&(struct stx7105_lirc_config) {
  			.rx_mode = stx7105_lirc_rx_mode_ir,
  			.tx_enabled = 1,
  			.tx_od_enabled = 1, });
! */
  	return platform_add_devices(mb680_devices, ARRAY_SIZE(mb680_devices));
  }
  arch_initcall(mb680_devices_init);
