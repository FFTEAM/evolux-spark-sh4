*** a/arch/sh/kernel/cpu/sh4/setup-stb7100.c	2011-01-03 11:13:35.000000000 +0100
--- b/setup-stb7100.c	2011-01-03 16:28:45.578307315 +0100
***************
*** 514,520 ****
  	mac_speed_sc = sysconf_claim(SYS_CFG, 7, 20, 20, "stmmac");
  
  	/* Remove the PHY clk */
! 	stpio_request_pin(3, 7, "stmmac EXTCLK", STPIO_ALT_OUT);
  
  	/* Configure the ethernet MAC PBL depending on the cut of the chip */
  	if (chip_revision == 1){
--- 514,520 ----
  	mac_speed_sc = sysconf_claim(SYS_CFG, 7, 20, 20, "stmmac");
  
  	/* Remove the PHY clk */
! //	stpio_request_pin(3, 7, "stmmac EXTCLK", STPIO_ALT_OUT);
  
  	/* Configure the ethernet MAC PBL depending on the cut of the chip */
  	if (chip_revision == 1){
***************
*** 677,685 ****
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
  	STASC_DEVICE(0x18031000, 122, -1, -1, 1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! 	STASC_DEVICE(0x18032000, 121, -1, -1, 4, 3, 2, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
! 	STASC_DEVICE(0x18033000, 120, -1, -1, 5, 0, 1, 2, 3,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
  };
  
--- 677,685 ----
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
  	STASC_DEVICE(0x18031000, 122, -1, -1, 1, 0, 1, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT), /* oe pin: 6 */
! 	STASC_DEVICE(0x18032000, 121, -1, -1, 4, 3, 2, -1, -1,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
! 	STASC_DEVICE(0x18033000, 120, -1, -1, 5, 0, 1, -1, -1,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
  };
  
*** a/drivers/stm/pio.c	2011-01-03 11:13:42.000000000 +0100
--- b/pio.c	2011-01-03 17:15:15.958555041 +0100
***************
*** 154,159 ****
--- 154,168 ----
  		stpio_configure_pin(pin, direction);
  		pin->name = name;
  	}
+ 	else
+ 	{
+ 		pin = &stpio_ports[portno].pins[pinno];
+ 
+ 		if( pin )
+ 		{
+ 			printk( "GPIO %d %d is occupied by %s\n", portno, pinno, pin->name );
+ 		}
+ 	}
  
  	spin_unlock(&stpio_lock);
  
***************
*** 163,169 ****
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
! 	stpio_configure_pin(pin, STPIO_IN);
  	pin->name = NULL;
  	pin->func = 0;
  	pin->dev  = 0;
--- 172,178 ----
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
! //	stpio_configure_pin(pin, STPIO_IN);
  	pin->name = NULL;
  	pin->func = 0;
  	pin->dev  = 0;
*** a/arch/sh/boards/st/mb448/setup.c	2011-01-05 19:06:49.000000000 +0100
--- b/setup.c	2011-01-07 22:40:50.928603786 +0100
***************
*** 18,42 ****
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
  #include <linux/phy.h>
  #include <asm/irl.h>
  
  static struct stpio_pin *vpp_pio;
  
! static int ascs[2] __initdata = { 2, 3 };
  
  void __init mb448_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STb7109E Reference board initialisation\n");
  
  	stx7100_early_device_init();
! 	stb7100_configure_asc(ascs, 2, 0);
  }
  
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_SPI_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY),
  };
  
--- 18,65 ----
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
+ #include <linux/bpa2.h>
  #include <linux/phy.h>
  #include <asm/irl.h>
  
  static struct stpio_pin *vpp_pio;
  
! static int ascs[2] __initdata = { 2 };
! 
! const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
! const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
! 
! static struct bpa2_partition_desc bpa2_parts_table[] = {
! 	{
! 		.name  = "LMI_VID",
! 		.start = 0x10800000,
! 		.size  = 0x03800000,
! 		.flags = 0,
! 		.aka   = LMI_VID_partalias
! 	},
! 	{
! 		.name  = "LMI_SYS",
! 		.start = 0,
! 		.size  = 0x02600000,
! 		.flags = 0,
! 		.aka   = LMI_SYS_partalias
! 	}
! };
! 
  
  void __init mb448_setup(char** cmdline_p)
  {
  	printk("STMicroelectronics STb7109E Reference board initialisation\n");
  
  	stx7100_early_device_init();
! 	stb7100_configure_asc(ascs, 1, 0);
!   	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
  }
  
  static struct plat_ssc_data ssc_private_info = {
  	.capability  =
  		ssc0_has(SSC_I2C_CAPABILITY) |
! 		ssc1_has(SSC_I2C_CAPABILITY) |
  		ssc2_has(SSC_I2C_CAPABILITY),
  };
  
***************
*** 62,84 ****
  
  static void set_vpp(struct map_info * info, int enable)
  {
! 	stpio_set_pin(vpp_pio, enable);
  }
  
! static struct mtd_partition mtd_parts_table[3] = {
  	{
! 		.name = "Boot firmware",
! 		.size = 0x00040000,
! 		.offset = 0x00000000,
! 	}, {
! 		.name = "Kernel",
! 		.size = 0x00100000,
! 		.offset = 0x00040000,
! 	}, {
! 		.name = "Root FS",
! 		.size = MTDPART_SIZ_FULL,
! 		.offset = 0x00140000,
! 	}
  };
  
  static struct physmap_flash_data physmap_flash_data = {
--- 85,200 ----
  
  static void set_vpp(struct map_info * info, int enable)
  {
! //	stpio_set_pin(vpp_pio, enable);
  }
  
! static struct mtd_partition mtd_parts_table[] = 
! {
! #if 1
  	{
! 	 .name = "Boot firmware : 	0xA000.0000-0xA003.FFFF",
! 	 .size = 0x00040000,
! 	 .offset = 0x00000000,
! 	 /* mask_flags: MTD_WRITEABLE *//* force read-only */
! 	 },
! 	 {
! 	 .name = "Kernel - 		0xA004.0000-0xA01F.FFFF",
! 	 .size = 0x001C0000,
! 	 .offset = 0x00040000,
! 	 },
! 	 {
! 	 .name = "Config FS - 		0xA020.0000-0xA029.FFFF",
! 	 .size = 0x0A0000,	
! 	 .offset = 0x00200000,
! 	 },
! 	 {
! 	 .name = "Root FS-		0xA02A.0000-0xA04D.FFFF",
! 	 .size = 0x240000,	/* will expand to the end of the flash */
! 	 .offset = 0x002A0000,
! 	 },
! 	 {
! 	 .name = "App + GTK 1		0xA04E.0000-0xA0FF.FFFF",
! 	 .size = 0x00B20000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "App + GTK 2		0xA04E.0000-0xA0FF.FFFF",
! 	 .size = 0x00B20000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "App + GTK 3		0xA04E.0000-0xA0FF.FFFF",
! 	 .size = 0x00B20000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "All Flash Block	0xA000.0000-0xA0FF.FFFF",
! 	 .size = 0x01000000,	/* will expand to the end of the flash */
! 	 .offset = 0x00000000,
! 	 },
! 	 {
! 	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
! 	 .size = 0x00fC0000,	/* will expand to the end of the flash */
! 	 .offset = 0x00040000,
! 	 },
! 	 {
! 	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
! 	 .size = 0x00fC0000,	/* will expand to the end of the flash */
! 	 .offset = 0x00040000,
! 	 }	 
! #else
! 	{
! 	 .name = "Boot firmware : 	0xA000.0000-0xA003.FFFF",
! 	 .size = 0x00040000,
! 	 .offset = 0x00000000,
! 	 /* mask_flags: MTD_WRITEABLE *//* force read-only */
! 	 },
! 	 {
! 	 .name = "Kernel - 		0xA004.0000-0xA01F.FFFF",
! 	 .size = 0x001C0000,
! 	 .offset = 0x00040000,
! 	 },
! 	 {
! 	 .name = "Config FS - 		0xA020.0000-0xA029.FFFF",
! 	 .size = 0x0A0000,	
! 	 .offset = 0x00200000,
! 	 },
! 	 {
! 	 .name = "Root FS-		0xA02A.0000-0xA04D.FFFF",
! 	 .size = 0x240000,	/* will expand to the end of the flash */
! 	 .offset = 0x002A0000,
! 	 },
! 	 {
! 	 .name = "APP_Modules		0xA04E.0000-0xA0AF.FFFF",
! 	 .size = 0x0620000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "App + GTK		0xA04E.0000-0xA0FF.FFFF",
! 	 .size = 0x00B20000,	/* will expand to the end of the flash */
! 	 .offset = 0x004E0000,
! 	 },
! 	 {
! 	 .name = "GTK Lib		0xA0B0.0000-0xA0FF.FFFF",
! 	 .size = 0x00500000,	/* will expand to the end of the flash */
! 	 .offset = 0x00B00000,
! 	 },
! 	 {
! 	 .name = "All Flash Block	0xA000.0000-0xA0FF.FFFF",
! 	 .size = 0x01000000,	/* will expand to the end of the flash */
! 	 .offset = 0x00000000,
! 	 },
! 	 {
! 	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
! 	 .size = 0x00fC0000,	/* will expand to the end of the flash */
! 	 .offset = 0x00040000,
! 	 },
! 	 {
! 	 .name = "Update Flash Block	0xA004.0000-0xA0FF.FFFF",
! 	 .size = 0x00fC0000,	/* will expand to the end of the flash */
! 	 .offset = 0x00040000,
! 	 }	 
! #endif	 
  };
  
  static struct physmap_flash_data physmap_flash_data = {
***************
*** 90,96 ****
  
  static struct resource physmap_flash_resource = {
  	.start		= 0x00000000,
! 	.end		= 0x00800000 - 1,
  	.flags		= IORESOURCE_MEM,
  };
  
--- 206,212 ----
  
  static struct resource physmap_flash_resource = {
  	.start		= 0x00000000,
! 	.end		= 0x01000000 - 1,
  	.flags		= IORESOURCE_MEM,
  };
  
***************
*** 119,126 ****
  	.resource	= (struct resource[]) {
                  {
  			.name	= "phyirq",
! 			.start	= IRL0_IRQ,
! 			.end	= IRL0_IRQ,
  			.flags	= IORESOURCE_IRQ,
  		},
  	},
--- 235,242 ----
  	.resource	= (struct resource[]) {
                  {
  			.name	= "phyirq",
! 			.start	= IRL3_IRQ,
! 			.end	= IRL3_IRQ,
  			.flags	= IORESOURCE_IRQ,
  		},
  	},
***************
*** 135,159 ****
  	&mb448_phy_device,
  };
  
  static int __init device_init(void)
  {
  	struct stpio_pin *smc91x_reset;
  
  	stx7100_configure_sata();
  	stx7100_configure_ssc(&ssc_private_info);
  	stx7100_configure_usb();
! 	stx7100_configure_ethernet(0, 0, 0);
  
! 	vpp_pio = stpio_request_pin(2,7, "VPP", STPIO_OUT);
  
! 	/* Reset the SMSC 91C111 Ethernet chip */
! 	smc91x_reset = stpio_request_set_pin(2, 6, "smc91x_reset",
  					     STPIO_OUT, 0);
! 	udelay(1);
! 	stpio_set_pin(smc91x_reset, 1);
! 	udelay(1);
  	stpio_set_pin(smc91x_reset, 0);
  
  	return platform_add_devices(mb448_devices,
  				    ARRAY_SIZE(mb448_devices));
  }
--- 251,283 ----
  	&mb448_phy_device,
  };
  
+ static struct plat_stm_pwm_data pwm_private_info = {
+ 	.flags		= PLAT_STM_PWM_OUT1,
+ };
+ 
  static int __init device_init(void)
  {
  	struct stpio_pin *smc91x_reset;
  
  	stx7100_configure_sata();
+ 	stx7100_configure_pwm(&pwm_private_info);	
  	stx7100_configure_ssc(&ssc_private_info);
  	stx7100_configure_usb();
! 	stx7100_configure_ethernet(0, 1, 0);
  
! //	vpp_pio = stpio_request_pin(2,7, "VPP", STPIO_OUT);
  
! 	/* Reset the USB POWER 
! 	smc91x_reset = stpio_request_set_pin(5, 7, "smc91x_reset",
  					     STPIO_OUT, 0);
! //	udelay(1);
! //	stpio_set_pin(smc91x_reset, 1);
! //	udelay(1);
  	stpio_set_pin(smc91x_reset, 0);
  
+ 	udelay( 10 );
+ 	stpio_free_pin( smc91x_reset );
+ */
  	return platform_add_devices(mb448_devices,
  				    ARRAY_SIZE(mb448_devices));
  }

