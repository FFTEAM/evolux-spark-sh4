--- linux-sh4/arch/sh/boards/mach-hdk7105/setup.c	2012-03-11 12:51:04.780592485 +0100
+++ linux-sh4/arch/sh/boards/mach-hdk7105/setup.c	2012-03-11 12:46:50.283330496 +0100
@@ -27,10 +27,44 @@
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/nand.h>
 #include <linux/mtd/partitions.h>
+#include <linux/bpa2.h>
 #include <linux/spi/spi.h>
 #include <linux/spi/flash.h>
 #include <asm/irq-ilc.h>
 
+/***** 2011-11-14 D26LF Add:
+    Description:spi flash
+*/
+#define SPI_FLASH_BOOT
+/***** 2011-11-14 D26LF Add end ****/
+
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb)
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    },
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x06000000, /* 92 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    },
+};
+
 /*
  * Flash setup depends on boot-device:
  *
@@ -47,9 +81,10 @@
  * [Jumper settings based on board v1.2-011]
  */
 
-#define HDK7105_PIO_PCI_SERR  stm_gpio(15, 4)
-#define HDK7105_PIO_PHY_RESET stm_gpio(15, 5)
-#define HDK7105_PIO_PCI_RESET stm_gpio(15, 7)
+//#define HDK7105_PIO_PCI_SERR  stm_gpio(15, 4)
+//#define HDK7105_PIO_PHY_RESET stm_gpio(15, 5)
+#define HDK7105_PIO_PHY_RESET stm_gpio(5, 7)
+//#define HDK7105_PIO_PCI_RESET stm_gpio(15, 7)
 #define HDK7105_GPIO_FLASH_WP stm_gpio(6, 4)
 
 
@@ -68,8 +103,11 @@
 	stx7105_configure_asc(3, &(struct stx7105_asc_config) {
 			.hw_flow_control = 1,
 			.is_console = 0, });
+
+   	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
+#if 0
 /* PCI configuration */
 static struct stm_plat_pci_config hdk7105_pci_config = {
 	.pci_irq = {
@@ -97,6 +135,8 @@
 	return stx7105_pcibios_map_platform_irq(&hdk7105_pci_config, pin);
 }
 
+#endif  /* 0 */
+
 static struct platform_device hdk7105_leds = {
 	.name = "leds-gpio",
 	.id = 0,
@@ -160,7 +200,7 @@
 static int hdk7105_phy_reset(void *bus)
 {
 	gpio_set_value(HDK7105_PIO_PHY_RESET, 0);
-	udelay(100);
+	mdelay(100);
 	gpio_set_value(HDK7105_PIO_PHY_RESET, 1);
 
 	return 1;
@@ -210,16 +250,36 @@
 struct stm_nand_bank_data hdk7105_nand_flash = {
 	.csn		= 1,
 	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
-	.nr_partitions	= 2,
+	.nr_partitions	= 7,
 	.partitions	= (struct mtd_partition []) {
-		{
-			.name	= "NAND Flash 1",
+	    	{
+			.name	= "uboot",
 			.offset	= 0,
-			.size 	= 0x00800000
+			.size 	= 0x00100000 //1M  //uboot boot mode
 		}, {
-			.name	= "NAND Flash 2",
-			.offset = MTDPART_OFS_NXTBLK,
-			.size	= MTDPART_SIZ_FULL
+			.name	= "Spark kernel",
+			.offset	= 0x00100000,
+			.size 	= 0x00a00000 //10M
+		}, {
+			.name = "Reserve0",
+	       		.offset = 0x00b00000,
+			.size = 0x00700000, //7M
+		}, {
+			.name = "Reserve1",
+			.offset = 0x01200000,
+			.size = 0x00200000, //2M
+		}, {
+			.name	= "Spark Userfs",
+			.offset	= 0x01400000,
+			.size	= 0x16c00000  //364M
+		}, {
+			.name	= "E2 kernel",
+			.offset	= 0x18000000,
+			.size	= 0x00800000 //8M
+		}, {
+			.name	= "E2 Userfs",
+			.offset	= 0x18800000,
+			.size	= 0x07700000 //119M	cc changed reserved 1024KB for u-boot bbt
 		},
 	},
 	.timing_data		= &(struct stm_nand_timing_data) {
@@ -240,13 +300,32 @@
 	.modalias       = "m25p80",
 	.bus_num        = 0,
 	.chip_select    = stm_gpio(2, 4),
-	.max_speed_hz   = 7000000,
+	.max_speed_hz   = 500000,
 	.mode           = SPI_MODE_3,
 	.platform_data  = &(struct flash_platform_data) {
 		.name = "m25p80",
+	/***** 2011-11-14 D26LF Modi:
+	    Description:spi flash
+	*/
+	#ifdef SPI_FLASH_BOOT
+		.type = "en25f16",
+	#else
 		.type = "m25p32",
+	#endif
+	/***** 2011-11-14 D26LF Modi end ****/
 		.nr_parts	= 2,
 		.parts = (struct mtd_partition []) {
+
+		/***** 2011-11-14 D26LF Modi:
+		Description:spi flash
+		*/
+			#ifdef SPI_FLASH_BOOT
+			{
+				.name = "uboot",
+				.size = 0x00100000,
+				.offset = 0,
+			},
+			#else
 			{
 				.name = "Serial Flash 1",
 				.size = 0x00080000,
@@ -256,16 +335,35 @@
 				.size = MTDPART_SIZ_FULL,
 				.offset = MTDPART_OFS_NXTBLK,
 			},
+			#endif
+			/***** 2011-11-14 D26LF Modi end ****/
 		},
 	},
 };
 
 static struct platform_device *hdk7105_devices[] __initdata = {
-	&hdk7105_leds,
+	//&hdk7105_leds,
 	&hdk7105_front_panel,
 	&hdk7105_nor_flash,
 };
 
+void hdk7105_configure_ssc_spi(void)
+{
+	stx7105_configure_ssc_spi(4, &(struct stx7105_ssc_config) {
+			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
+			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6,
+			.routing.ssc1.mrst = stx7105_ssc1_mrst_pio2_7});
+}
+
+EXPORT_SYMBOL(hdk7105_configure_ssc_spi);
+
+void hdk7105_spi_register(void)
+{
+	spi_register_board_info(&hdk7105_serial_flash, 1);
+}
+
+EXPORT_SYMBOL(hdk7105_spi_register);
+
 static int __init hdk7105_device_init(void)
 {
 	struct sysconf_field *sc;
@@ -296,7 +394,15 @@
 		/* NOR mapped to EMIB, with physical offset of 0x06000000! */
 		nor_bank_base = emi_bank_base(1);
 		nor_bank_size = emi_bank_base(2) - nor_bank_base;
+		/***** 2011-11-14 D26LF Modi:
+		    Description:spi flash
+		*/
+		#ifdef SPI_FLASH_BOOT
+		hdk7105_nand_flash.csn = 0;
+		#else
 		hdk7105_nand_flash.csn = 2;
+		#endif
+		/***** 2011-11-14 D26LF Modi end ****/
 		break;
 	default:
 		BUG();
@@ -312,6 +418,7 @@
 	hdk7105_nor_flash.resource[0].start += nor_bank_base;
 	hdk7105_nor_flash.resource[0].end += nor_bank_base;
 
+	#if 0
 	/* Setup the PCI_SERR# PIO */
 	if (gpio_request(HDK7105_PIO_PCI_SERR, "PCI_SERR#") == 0) {
 		gpio_direction_input(HDK7105_PIO_PCI_SERR);
@@ -322,12 +429,14 @@
 		printk(KERN_WARNING "hdk7105: Failed to claim PCI SERR PIO!\n");
 	}
 	stx7105_configure_pci(&hdk7105_pci_config);
+	#endif  /* 0 */
+	//stx7105_configure_sata(0);
 
-	stx7105_configure_sata(0);
-
+	#if 0
 	stx7105_configure_pwm(&(struct stx7105_pwm_config) {
 			.out0 = stx7105_pwm_out0_pio13_0,
 			.out1 = stx7105_pwm_out1_disabled, });
+	#endif  /* 0 */
 
 	/* Set SPI Boot pads as inputs to avoid contention with SSC1 */
 	gpio_request(stm_gpio(15, 0), "SPI Boot CLK");
@@ -353,10 +462,15 @@
 			.routing.ssc0.sclk = stx7105_ssc0_sclk_pio2_2,
 			.routing.ssc0.mtsr = stx7105_ssc0_mtsr_pio2_3, });
 	/* SPI - SerialFLASH */
+	#if 0
 	stx7105_configure_ssc_spi(1, &(struct stx7105_ssc_config) {
 			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
 			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6,
 			.routing.ssc1.mrst = stx7105_ssc1_mrst_pio2_7});
+	#endif  /* 0 */
+	stx7105_configure_ssc_i2c(1, &(struct stx7105_ssc_config) {
+			.routing.ssc1.sclk = stx7105_ssc1_sclk_pio2_5,
+			.routing.ssc1.mtsr = stx7105_ssc1_mtsr_pio2_6, });
 	/* I2C_xxxC - JN1 (NIM), JN3, UT1 (CI chip), US2 (EEPROM) */
 	stx7105_configure_ssc_i2c(2, &(struct stx7105_ssc_config) {
 			.routing.ssc2.sclk = stx7105_ssc2_sclk_pio3_4,

*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/net/stmmac/stmmac_mdio.c	2011-11-24 22:22:25.000000000 +0200
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c	2011-11-24 23:33:55.732873713 +0200
***************
*** 169,174 ****
--- 169,175 ----
  	priv->mii = new_bus;
  
  	found = 0;
+ 
  	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
***************
*** 191,202 ****
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
! 			    (priv->plat->phy_addr == -1))
  				priv->plat->phy_addr = addr;
  
- 			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
- 				(priv->plat->phy_addr == addr);
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";
--- 192,214 ----
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 
! 			act = 0;
! 
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && (/*(priv->plat->phy_addr == -1) ||*/
! 					(phydev->phy_id == 0x0181b880) || // Davicom DM9161E
! 					(phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
! 					(phydev->phy_id == 0x00181b80) || // Davicom DM9131
! 					(phydev->phy_id == 0x1c040011) || // STe100p
! 					(phydev->phy_id == 0x00061c50) || // STe101p
! 					(phydev->phy_id == 0x00008201) || //
! 					(phydev->phy_id == 0x0007c0f1) || // Pingulux
! 					(phydev->phy_id == 0x001cc912)))  // RTL821x
! 			{
  				priv->plat->phy_addr = addr;
+ 				act=1;
+ 			}
  
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";
--- linux-sh4/arch/sh/kernel/setup.c	2012-03-24 19:04:15.446990932 +0100
+++ linux-sh4/arch/sh/kernel/setup.c	2012-03-24 18:59:27.000000000 +0100
@@ -388,6 +388,48 @@
 #endif
 #endif
 
+	{
+		/* spider: remove bigphysarea allocation from command line */
+		int i;
+		int command_line_len = strlen(command_line);
+
+		for(i = 0; i < (command_line_len-11); i++)
+		{
+			if(!strncmp(command_line + i + 1, "bigphysarea", 11))
+			{
+				// search for next pos
+				int k;
+				int pos=command_line_len;
+				for(k=i+1; k<command_line_len; k++)
+					if(command_line[k]==' ') {
+						pos=k;
+						break;
+					}
+				memmove(command_line+i, command_line+pos, command_line_len-pos);
+				memset(&command_line[command_line_len-(pos-i)], '\0', pos-i);
+				break;
+			}
+		}
+
+		/* martii: removing "rootfstype=jffs2" allows us to boot from yaffs2 without changing u-boot bootargs */
+		command_line_len = strlen(command_line);
+		for(i = 0; i < (command_line_len-16); i++)
+			if(!strncmp(command_line + i + 1, "rootfstype=jffs2", 16))
+			{
+				// search for next pos
+				int k;
+				int pos=command_line_len;
+				for(k=i+1; k<command_line_len; k++)
+					if(command_line[k]==' ') {
+						pos=k;
+						break;
+					}
+				memmove(command_line+i, command_line+pos, command_line_len-pos);
+				memset(&command_line[command_line_len-(pos-i)], '\0', pos-i);
+				break;
+			}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
*** linux-sh4-2.6.32.46_stm24_0209.orig/drivers/net/stmmac/dwmac_lib.c	2011-11-24 22:22:25.000000000 +0200
--- linux-sh4/drivers/net/stmmac/dwmac_lib.c	2011-11-24 23:33:55.732873713 +0200
@@ -210,7 +210,7 @@
 	}
 	/* Optional hardware blocks, interrupts should be disabled */
 	if (unlikely(intr_status &
-		     (DMA_STATUS_GPI | DMA_STATUS_GMI | DMA_STATUS_GLI)))
+		     (DMA_STATUS_GPI | DMA_STATUS_GMI | DMA_STATUS_GLI)) && printk_ratelimit())
 		pr_info("%s: unexpected status %08x\n", __func__, intr_status);
 	/* Clear the interrupt by writing a logic 1 to the CSR5[15-0] */
 	writel((intr_status & 0x1ffff), ioaddr + DMA_STATUS);

