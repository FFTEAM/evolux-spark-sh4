#!/bin/sh

MODDIR=/lib/modules
PinkPanelPath=/usr/lib/enigma2/python/Plugins/Extensions/PinkPanel
echo "init frontpanel"
#insmod $MODDIR/vfd.ko
insmod $MODDIR/aotom.ko
insmod $MODDIR/simu_button.ko
if [ -e $MODDIR/encrypt.ko ]; then
   insmod $MODDIR/encrypt.ko
fi

if [ -e /var/etc/.firstboot ]; then
   echo "WAIT 1 min" >/dev/vfd
   echo "WAIT 1 min"
   rm /var/etc/.firstboot
   touch /dev/.devfsd
fi

/etc/init.d/mountvirtfs start
/etc/init.d/portmap start

insmod $MODDIR/e2_proc.ko
insmod $MODDIR/autofs4.ko

if [ ! -e /var/etc/.firstboot ]; then

   echo "Starting DEBUG Interface"
   /etc/init.d/mountall start
   /etc/init.d/hostname start
#   echo "starting telnetd vsftpd inetd mountall"
   /usr/sbin/telnetd -l /bin/login
   /etc/init.d/vsftpd start
   /usr/sbin/inetd
   echo "init stmfb"
   insmod $MODDIR/stmcore-display-sti7111.ko
   insmod $MODDIR/stmfb.ko display0=1280x720-32@50:12m:pal:yuv:yuv

   echo "LOADING MODULES"   
   echo "LOAD" > /dev/vfd
   if [ -e /boot/audio.elf ] && [ -e /boot/video.elf ]; then
   	echo "load a firmware"
   	/bin/ustslave /dev/st231-1 /boot/audio.elf
   	echo "load v firmware"
   	/bin/ustslave /dev/st231-0 /boot/video.elf
   else
	echo "FIRMWARE MISSING (*.elf) !!!"
   fi
if [ -e $MODDIR/cpu_frequ.ko ]; then
   insmod $MODDIR/cpu_frequ.ko
fi
   echo "init embx"
   insmod $MODDIR/embxshell.ko
   insmod $MODDIR/embxmailbox.ko mailbox0=0xfe211000:136:set2 mailbox1=0xfe212000:0 ;
   insmod $MODDIR/embxshm.ko mailbox0=shm:0:7:0x60000000:0:256:256:0:512:0x40000000:0x10000000 ;
   insmod $MODDIR/mme_host.ko transport0=shm
   echo "init AVS"
#   insmod $MODDIR/avs.ko type=spark_avs
   insmod $MODDIR/avs.ko type=avs_pio
   player=`cat /proc/stb/player/version`
   echo "init player $player"

   insmod $MODDIR/mmelog.ko
   insmod $MODDIR/ksound.ko
   insmod $MODDIR/p2div64.ko
   insmod $MODDIR/stm_v4l2.ko
   insmod $MODDIR/stmvout.ko
   insmod $MODDIR/stmvbi.ko
   insmod $MODDIR/pseudocard.ko
   insmod $MODDIR/stv090x.ko
   insmod $MODDIR/pti.ko waitMS=20 videoMem=4096
   insmod $MODDIR/stm_monitor.ko
   insmod $MODDIR/stmsysfs.ko
#   whichSTM=`uname -a | grep stm23`
#   if [ -z "$whichSTM" ]; then
#      insmod $MODDIR/stmdvb.ko TSsource0=0
#   else
      insmod $MODDIR/stmdvb.ko
#   fi
#   insmod $MODDIR/player2.ko
   insmod $MODDIR/player2.ko discardlateframe=0
   insmod $MODDIR/sth264pp.ko
   insmod $MODDIR/stmalloc.ko
   insmod $MODDIR/platform.ko
   insmod $MODDIR/silencegen.ko
   insmod $MODDIR/bpamem.ko
   mknod /dev/bpamem c 153 0 
   insmod $MODDIR/smartcard.ko
   #eplayer3 /boot/startup.mp4 &
   stfbcontrol a 0

   echo "init lircd"
   /usr/bin/lircd

   mknod /dev/rc c 147 1
   mknod /dev/sci0 c 169 0 
   major=$(awk "\$2==\"sparkid\" {print \$1}" /proc/devices)
   rm -f /dev/sparkid
   mknod /dev/sparkid c $major 0 

   (sleep 5; /usr/sbin/automount --timeout=30 /autofs file /etc/auto.usb) &
   (sleep 10; if [ -e /autofs/sda1 ]; then mount -o bind /autofs/sda1 /media/hdd; stdFolders="movie music picture swap"; for i in $stdFolders; do mkdir -p /media/hdd/$i; done; fi) &
   /bin/evremote2 &
   stfbcontrol a 255
### eth start ###
   NFS=`grep -c nfs /proc/cmdline`
   if [ "$NFS" -eq "1" ]; then
      echo "Booting from nfs, don't set network"
   else
      /etc/init.d/setupETH.sh &
   fi

   if [ -e /usr/script/user_script.sh ]; then
	/usr/script/user_script.sh &
   fi
neutrinoTuxtxt=`cat /usr/local/share/config/neutrino.conf | grep video_Mode= | cut -d = -f2`
if [ $neutrinoTuxtxt == "7" ]; then
   ln -sf /usr/local/share/config/tuxtxt/tuxtxt2_720.conf /usr/local/share/config/tuxtxt/tuxtxt2.conf
else
   ln -sf /usr/local/share/config/tuxtxt/tuxtxt2_1080.conf /usr/local/share/config/tuxtxt/tuxtxt2.conf
fi
   /etc/init.d/Swap.sh &
   echo "run" > /dev/vfd
   echo "LOADING neutrino"

	   until false
	   do
	      echo "starting neutrino ->"
	      /usr/local/bin/neutrino -f -u
	      rtv=$?
	      echo "neutrino ended <- RTV: " $rtv
	      case "$rtv" in
			0|1) echo "$rtv"
			   echo "SHUTDOWN"
		           sync
			   HDDON=`mount | grep sda1 | cut -d " " -f5`
			   if [ ! -z "$HDDON" ] && [ -e /etc/.fsck ]; then
				echo "hdd-check"
				echo "FSCK" > /dev/vfd
				umount /dev/sda1
				fsck.$HDDON -y /dev/sda1
			   fi
			   init 0;;
			2) echo "$rtv"
			   echo "REBOOT"
			   sync
			   init 6;;
			*) echo "$rtv"
			   echo "ERROR"
			   echo "0" > /proc/progress;;
		esac
   done 

fi

#never reached
echo "REBOOT PINGULUX" > /dev/vfd
echo "REBOOT PINGULUX"
reboot -f

